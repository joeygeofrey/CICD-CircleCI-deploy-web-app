version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  destroy_environment:
    description: Destroys the CloudFormation stacks when given the workflow ID
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  revert_migrations:
    description: Revert last migration
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migration
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/T5Z7SuAe53ZFcVFdvdjR6E/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm i
              npm run migrations:revert
            fi
  slack_notify_fail:
    description: Notifies slack channel upon job failure
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  slack_notify_pass:
    description: Notifies slack channel upon job success
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1 

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack_notify_fail
  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack_notify_fail
  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack_notify_fail
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack_notify_fail
  scan_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Scan & Analysis
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack_notify_fail
  scan_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Scan & Analysis
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
            npm audit fix --force
            npm audit --audit-level=critical
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack_notify_fail
  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Backend infrastructure check
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Frontend infrastructure check
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Fetch backend-instance IP into Ansible inventory
          command: |
            Backend_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo -e "[web]\n"$Backend_IP >> ansible/inventory.txt
            cat ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt
      - destroy_environment
      - slack_notify_fail
  configure_infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4e:5e:f5:cf:51:80:d2:fd:2d:30:e4:8e:fa:18:54:cb"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible aws-cli curl
      - run:
          name: Configure server
          command: |
            cd ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment
      - slack_notify_fail
  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install -y curl
            sudo apt-get install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration output to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
              curl https://kvdb.io/T5Z7SuAe53ZFcVFdvdjR6E/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            fi
      - destroy_environment
      - revert_migrations
      - slack_notify_fail
  deploy_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install -y python3
            sudo apt-get install -y awscli
            sudo apt-get install -y tar gzip
            sudo apt-get install -y curl
      - run:
          name: Fetch backend url & deploy frontend objects
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            cd frontend
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
      - revert_migrations
      - slack_notify_fail
  deploy_backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4e:5e:f5:cf:51:80:d2:fd:2d:30:e4:8e:fa:18:54:cb"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install --upgrade pip
            pip3 install awscli
      - run: 
          name: Save all db varibles in env file 
          command: |
            ls
            cd backend
            echo ENVIRONMENT=production >> .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            cat .env
            ls
      - run:
          name: Package backend 
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: Deploy backend
          command: |
            cd ansible
            echo "Contents of the inventory.txt file"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
      - revert_migrations
      - slack_notify_fail
  smoke_test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs curl
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
      - revert_migrations
      - slack_notify_fail
  cloudfront_update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            yum -y install tar gzip curl
      - run:
          name: Store current workflow id as OldWorkflowID.txt
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "Current stacks: ${STACKS[@]}"
            echo ${OldWorkflowID} >> ~/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      - run:
          name: Change Cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy_environment
      - revert_migrations
      - slack_notify_fail
      - slack_notify_pass
  cleanup_stacks:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip curl
      - attach_workspace:
          at: ~/
      - run:
          name: Fetch the old stack and remove stack
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "Checking if there are old stacks to be removed..."
            echo Old Workflow ID: "${OldWorkflowID:10:17}"
            echo "Current stacks: ${STACKS[@]}"
            echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID:10:17}" ]]
            then
              echo "Removing old stacks..."
              aws s3 rb "s3://udapeople-${OldWorkflowID:10:17}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:10:17}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:10:17}"
              echo "Successfully removed old stacks!"
            else
              echo "No old stacks were discovered"
            fi
      - slack_notify_fail
      - slack_notify_pass

workflows:
  UdaPeople_Deployment_Pipeline:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan_frontend:
          requires: [build_frontend]
      - scan_backend:
          requires: [build_backend]
      - deploy_infrastructure:
          requires: [test_frontend, test_backend, scan_frontend, scan_backend]
          filters:
            branches:
              only: [master]
      - configure_infrastructure:
          requires: [deploy_infrastructure]
      - run_migrations:
          requires: [configure_infrastructure]
      - deploy_frontend:
          requires: [run_migrations]
      - deploy_backend:
          requires: [run_migrations]
      - smoke_test:
          requires: [deploy_frontend, deploy_backend]
      - cloudfront_update:
          requires: [smoke_test]
      - cleanup_stacks:
          requires: [cloudfront_update]