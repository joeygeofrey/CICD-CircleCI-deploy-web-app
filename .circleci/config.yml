version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  destroy_environment:
    description: Destroys CloudFormation stacks given the workflow ID
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy Ennvironment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  revert_migrations:
    description: Revert last migration
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/2ioGGtEVLW7MDPtpRGojVM/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm i
              npm run migrations:revert
            fi

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  scan_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Scan & Analysis
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  scan_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Scan & Analysis
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
            npm audit fix --force
            npm audit --audit-level=critical
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Backend infrastructure check
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Frontend infrastructure check
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Fetch backend-instance IP into Ansible inventory
          command: |
            Backend_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo -e "[web]\n"$Backend_IP >> ansible/inventory.txt
            cat ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt
      - destroy_environment
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  configure_infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:4f:f3:f8:b8:e5:b4:21:f0:b4:da:ca:71:73:27:ad"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible aws-cli curl
      - run:
          name: Configure server
          command: |
            cd ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  run_migrations:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration output to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
              curl https://kvdb.io/2ioGGtEVLW7MDPtpRGojVM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment
      - revert_migrations
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  deploy_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y python3
            sudo apt install -y awscli
            sudo apt install -y nodejs
            sudo apt install -y curl
      - run:
          name: Fetch backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
      - revert_migrations
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  deploy_backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:4f:f3:f8:b8:e5:b4:21:f0:b4:da:ca:71:73:27:ad"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Package backend 
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: Deploy backend
          command: |
            cd ansible
            echo "Contents of the inventory.txt file"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
      - revert_migrations
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1
  smoke_test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs curl
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy_environment
      - revert_migrations
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
           event: pass
           template: basic_success_1

workflows:
  app_deploy_workflow:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan_frontend:
          requires: [build_frontend]
      - scan_backend:
          requires: [build_backend]
      - deploy_infrastructure:
          requires: [test_frontend, test_backend, scan_frontend, scan_backend]
      - configure_infrastructure:
          requires: [deploy_infrastructure]
      - run_migrations:
          requires: [configure_infrastructure]
      - deploy_frontend:
          requires: [run_migrations]
      - deploy_backend:
          requires: [run_migrations]